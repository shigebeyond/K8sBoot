- app(nginx):
    - config:
        auther: shigebeyond
        #default.conf: ${read_file(./default.conf)}
#    - config_from_files: ./default.conf # 单个文件
#    - config_from_files: ./conf/ # 目录
    - config_from_files: # 文件list
        - ./default.conf
        - ./index.html
#    - config_from_files: # 文件dict，key是配置名，value是文件路径
#        default.conf: ./default.conf

#    - secret_files: ./default.conf # 与 config_from_files 调用一样

    - containers:
        nginx: # 定义多个容器, dict形式, 键是容器名, 值是容器配置
          image: nginx # 镜像
          env: # 以dict方式设置环境变量
            TZ: Asia/Shanghai
            # 引用pod信息
            POD_NAME: ${ref_pod_field(metadata.name)}
            POD_NAMESPACE: ${ref_pod_field(metadata.namespace)}
            POD_IP: ${ref_pod_field(status.podIP)}
            # 引用容器资源信息
            CPU_MIN: ${ref_resource_field(requests.cpu)}
            CPU_MAX: ${ref_resource_field(limits.cpu)}
            MEM_MIN: ${ref_resource_field(requests.memory)}
            MEM_MAX: ${ref_resource_field(limits.memory)}
            # 引用配置
            AUTHOR: ${ref_config(auther)}
          env_from: # 从当前应用的 config 或 secret 资源中导入环境变量
            - config
            #- secret
          ports: # 端口映射
            - 80 # 容器端口
            #- 30000:80 # 服务端口:容器端口
            #- 30000:30000:80 # 宿主机端口:服务端口:容器端口
            #- udp://30000:80 # 前面加协议，默认tcp
          volumes: # 卷映射
            - /var/log/nginx
            #- /lnmp/www:/www
            # nginx配置文件挂载： https://blog.csdn.net/weixin_47415962/article/details/116003059
            - config://:/www # 挂载configmap所有key到目录
            - config://default.conf:/etc/nginx/conf.d/default.conf # 挂载configmap单个key到文件
            - downwardAPI://:/etc/podinfo # 将元数据labels和annotations以文件的形式挂载到目录
            - downwardAPI://labels:/etc/podinfo2/labels.properties # 将元数据labels挂载为文件
            #- pvc://pvc1:/usr/share/nginx/html # 将pvc挂载为目录
          # 启动命令：命令改写后导致nginx自身服务没起来，应该是覆盖了nginx镜像自身的启动命令
          #command: sed -i 's/POD_IP/\$POD_IP/g' /www/index.html; tail -f /etc/profile
          #command: while true;do echo hello;sleep 1;done # 死循环维持pod运行
          ready?: # 就绪态
            # 各种秒数
            #seconds: initialDelaySeconds=5 periodSeconds=5 timeoutSeconds=5 successThreshold=1 failureThreshold=5 # 全写
            seconds: i=5 p=5 t=5 s=1 f=5 # 简写
            # 动作
            action: ls /etc/nginx/
          live?: # 存活性探针
            # 各种秒数
            #seconds: initialDelaySeconds=5 periodSeconds=5 timeoutSeconds=5 successThreshold=1 failureThreshold=5 # 全写
            seconds: i=5 p=5 t=5 s=1 f=5 # 简写
            # 动作
            action: http://localhost:80 # 在pod中执行，请使用容器端口
          resources: # 资源
            cpu: 0.01 # 最小值
            #cpu: 0.01~0.02 # 最小值~最大值
            memory: 50Mi

    # 部署
    # 简写
#    - rc: 1
#    - rs: 1
#    - ds:
#    - sts: 1
#    - deploy: 1

    # 完整写法
#    - rc:
#        replicas: 1
#    - rs:
#        replicas: 1
#    - sts:
#        replicas: 1
#    - pod:
    - deploy:
        #hostname: nginx # 设置pod的主机名
        hostname:  # 设置pod的主机名，如果不赋值，则默认取app名
        replicas: 2 # 副本数
        nodeSelector: # 节点选择: dict形式
          kubernetes.io/os: linux
        nodeAffinity:
          require: # requiredDuringSchedulingIgnoredDuringExecution简写
            - kubernetes.io/os in linux # 标签选择的表达式
          prefer: # preferredDuringSchedulingIgnoredDuringExecution简写
            - kubernetes.io/os in linux
          weight: 1
        podAffinity:
          require: # requiredDuringSchedulingIgnoredDuringExecution简写
            - app = nginx
          prefer: # preferredDuringSchedulingIgnoredDuringExecution简写
            - app = nginx
          weight: 1
          tkey: kubernetes.io/hostname # topologyKey简写
        podAntiAffinity:
          require: # requiredDuringSchedulingIgnoredDuringExecution简写
            - app = xxx
          prefer: # preferredDuringSchedulingIgnoredDuringExecution简写
            - app = xxx
          weight: 1
          tkey: kubernetes.io/hostname # topologyKey简写
        tolerations: # 容忍
          #- node-role.kubernetes.io/master:NoSchedule
          - node-role.kubernetes.io/control-plane:NoSchedule
    - ingress:
        # url对转发的(服务)端口映射，支持字典树形式
        http://k8s.com/a: 80 # 当前应用的服务端口
        http://k8s.com/b: nginx:80 # 指定应用的服务端口
        http://k8s.com:
          /c: 80 # 当前应用的服务端口
          /d: nginx:80 # 指定应用的服务端口
        http://k8s.com/api(/|$)(.*): 80  # 路径重写，如果是/api/hello，则去掉前缀api，访问服务的/hello，网关一般这么搞
